openapi: "3.0.0"
info:
  title: Tshirt store API
  description:  create API for ecomm store
  version: 1.1.0
  contact:
    email: 
    url: ""

# servers:
#   - url: "https://localhost:4000/api/v1"
#     description: for local host - secure
#   - url: "http://localhost:4000/api/v1"
#     description: for local host - regular

servers:
  - url: "{protocol}://{url}/api/{version}"
    description: for local host 
    variables:
      version:
        enum:
          - v1
          - v2
        default: v1
      url:
        enum:
          - localhost:4000
          - lcotshirtstore.herokuapp.com
        default: localhost:4000
      protocol:
        enum:
          - http
          - https
        default: http

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /:
    get:
      tags:
        - Home
      summary: returns a greet message 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: string
                example: "mystring"
        400:
          description: Bad request
        500:
          description: internal server error
          
  /dummy:
    get:
      tags:
        - Home
      summary: returns a greet message from LCO
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: string
                example: "mystring"
        400:
          description: Bad request
        500:
          description: internal server error

  
  /signup:
    post:
      tags:
        - User
      summary: signup a new user. required files are - name, email, password and photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - photo
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                password:
                  type: string
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error
  
  /login:
    post:
      tags:
        - User
      summary: login a new user. required files are -  email and password. Also adds httpOnly cookie in browser. It sends token in response too.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error
  /logout:
    get:
      tags:
        - User
      summary: get request to logout the user. Also removes httpOnly cookies 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error
  /forgotPassword:
    post:
      tags:
        - User
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: internal server error
  /password/reset/{token}:
    post:
      tags:
        - User
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /userdashboard:
    get:
      tags:
        - User
      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth
      requestBody:
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error
 
  
  /password/update:
    post:
      tags:
        - User
      summary: User can update the password if he is logged in. Send oldPassword and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - password
              properties:
                oldPassword:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error
  /userdashboard/update:
    post:
      tags:
        - User
      summary: User can update the name, emails and photo. Photo is optional
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                email:
                  type: string
                photo:
                  in: formData
                  description: The uploaded file data
                  type: file
                  format: binary
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error
  
  /admin/users:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get array of all users
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        _id:
                          type: string
                        createdAt:
                          type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error        
    
  /admin/user/{id}:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get details of 1 user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        _id:
                          type: string
                        createdAt:
                          type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error
    put:
      tags:
        - Admin
      summary: If user is admin, he can update mentioned fields in user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: formData
          required: true
          schema:
            type: string
        - name: email
          in: formData
          required: true
          schema:
            type: string
        - name: role
          in: formData
          required: true
          schema:
            type: string
            enum: [user, admin, manager]
      requestBody: 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error
    delete:
      tags:
        - Admin
      summary: If user is admin, delete the user with given id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody: 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error
    
  /manager/users:
    get:
      tags:
        - Manager
      summary: If manager, response will get array of all users whose role is user
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        _id:
                          type: string
                        createdAt:
                          type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error

  /admin/product/add:
    post:
      tags:
        - Admin
      summary: If admin, Add a product
      parameters:
        
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - category
                - stock
                - brand
                - photos
              properties:
                name:
                  type: string
                  required: true
                price:
                  type: number
                  required: true
                description:
                  type: number
                  required: true
                category:
                  type: string
                  required: true
                  enum: [shortsleeves, longsleeves, sweatshirt, hoodies]
                stock:
                  type: number
                  required: true
                brand:
                  type: string
                  required: true
                photos:
                  in: formData
                  description: The uploaded photos
                  type: file
                  format: binary
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price: 
                        type: number
                      description: 
                        type: string
                      category: 
                        type: string
                      brand: 
                        type: string
                      ratings: 
                        type: number
                      numberOfReviews: 
                        type: number
                      user: 
                        type: string
                      photos: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      reviews: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            comment:
                              type: string
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
        400:
          description: Bad request
        500:
          description: internal server error
      
  /admin/products:
    get:
      tags:
        - Admin
      summary: If user is admin, he get all products
      
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price: 
                          type: number
                        description: 
                          type: string
                        category: 
                          type: string
                        brand: 
                          type: string
                        ratings: 
                          type: number
                        numberOfReviews: 
                          type: number
                        user: 
                          type: string
                        photos: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secure_url:
                                type: string
                        reviews: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              comment:
                                type: string
                              user:
                                type: string
                              name:
                                type: string
                              rating:
                                type: number
        400:
          description: Bad request
        500:
          description: internal server error


  /products:
    get:
      tags:
        - Product
      summary: A simple get request will give you all available products
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  filteredProductNumber:
                    type: number
                  totalcountProduct:
                    type: number
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price: 
                          type: number
                        description: 
                          type: string
                        category: 
                          type: string
                        brand: 
                          type: string
                        ratings: 
                          type: number
                        numberOfReviews: 
                          type: number
                        user: 
                          type: string
                        photos: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secure_url:
                                type: string
                        reviews: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              comment:
                                type: string
                              user:
                                type: string
                              name:
                                type: string
                              rating:
                                type: number
        400:
          description: Bad request
        500:
          description: internal server error

  /product/{id}:
    get:
      tags:
        - Product
      summary: Get a single product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price: 
                        type: number
                      description: 
                        type: string
                      category: 
                        type: string
                      brand: 
                        type: string
                      ratings: 
                        type: number
                      numberOfReviews: 
                        type: number
                      user: 
                        type: string
                      photos: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      reviews: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            comment:
                              type: string
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
        400:
          description: Bad request
        500:
          description: internal server error

  
  /reviews:
      get:
        tags:
          - Product
        summary: A simple get request will give you all reviews for given products
        parameters:
        - name: id
          in: query
          description: id of the product
          required: true
          schema:
            type: string
        requestBody:
          
        responses:
          200:
            description: All good success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    reviews:
                      type: array
                      items:
                        type: object
                        properties:
                          user:
                            type: string
                          name:
                            type: string
                          rating: 
                            type: number
                          comment: 
                            type: string
                          _id: 
                            type: string
                          
          400:
            description: Bad request
          500:
            description: internal server error
  
  /review:
      put:
        tags:
          - Product
        summary: A logged in user can post a review on any product. If review is already posted, it will just update the existing review
        parameters:
        
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - rating
                  - comment
                  - productId
                properties:
                  rating:
                    type: number
                    required: true
                  comment:
                    type: string
                    required: true
                  productId:
                    type: string
                    required: true
        responses:
          200:
            description: All good success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    reviews:
                      type: array
                      items:
                        type: object
                        properties:
                          user:
                            type: string
                          name:
                            type: string
                          rating: 
                            type: number
                          comment: 
                            type: string
                          _id: 
                            type: string
                          
          400:
            description: Bad request
          500:
            description: internal server error
      delete:
        tags:
          - Product
        summary: Delete the review of logged in user on given product id.
        parameters:
        - name: productId
          in: query
          required: true
          schema:
            type: string
        
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - rating
                  - comment
                  - productId
                properties:
                  rating:
                    type: number
                    required: true
                  comment:
                    type: string
                    required: true
                  productId:
                    type: string
                    required: true
        responses:
          200:
            description: All good success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    reviews:
                      type: array
                      items:
                        type: object
                        properties:
                          user:
                            type: string
                          name:
                            type: string
                          rating: 
                            type: number
                          comment: 
                            type: string
                          _id: 
                            type: string
                          
          400:
            description: Bad request
          500:
            description: internal server error
        
